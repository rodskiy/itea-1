AWSTemplateFormatVersion: '2010-09-09'
Description: 'ITEA-Project'
Parameters:
  LoadBalancerScheme:
    Type: String
    Default: 'internet-facing'
    AllowedValues:
    - 'internet-facing'
    - 'internal'
  myImageId:
    Type: AWS::EC2::Image::Id
    Default: 'ami-0877ced59cc0afebe'

Resources:
  TargetGroup: 
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: "instance"
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref "VPC"

  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties: 
      SecurityGroups: 
        - !Ref LBSecurityGroup
      Subnets: 
        - !Ref mySubnet1
        - !Ref mySubnet2
      Type: application

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: 'MyLaunchTemplate'
      LaunchTemplateData: 
        ImageId: !Ref 'myImageId'
        InstanceType: 't2.micro'
        KeyName: 'tst_Balancer'
        SecurityGroupIds: 
           - !Ref ASGSecurityGroup


  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener 
    Properties: 
      DefaultActions: 
        - Type: "forward"
          TargetGroupArn: !Ref "TargetGroup"
      LoadBalancerArn: !Ref "LoadBalancer"
      Port: 80
      Protocol: "HTTP"

  myASG: 
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AvailabilityZones: 
       - 'us-east-1b'
       - 'us-east-1a'
       - 'us-east-1c'
      DesiredCapacity: '2'
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
         - !Ref 'TargetGroup'
      LaunchTemplate: 
          LaunchTemplateName: 'MyLaunchTemplate'
          Version: '1'
      MaxSize: '4'
      MinSize: '1'
      VPCZoneIdentifier: 
        - !Ref "mySubnet2"
        - !Ref "mySubnet1"
        - !Ref "mySubnet3"

  LBSecurityGroup:
     Type: AWS::EC2::SecurityGroup
     Properties:
       GroupDescription: Enable HTTP access
       GroupName: 'LBSG'
       SecurityGroupIngress:
         - CidrIp: '0.0.0.0/0'
           FromPort: '80'
           IpProtocol: tcp
           ToPort: '80'
       SecurityGroupEgress:
         - CidrIp: '10.0.0.0/8'
           FromPort: '80'
           IpProtocol: tcp
           ToPort: '80'
       VpcId: !Ref "VPC"
    
  AttachGateway:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCGatewayAttachment
  InboundHTTPNetworkAclEntry:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: 'false'
      NetworkAclId: !Ref 'NetworkAcl'
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  InboundResponsePortsNetworkAclEntry:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: 'false'
      NetworkAclId: !Ref 'NetworkAcl'
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '102'
    Type: AWS::EC2::NetworkAclEntry
  InboundSSHNetworkAclEntry:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: 'false'
      NetworkAclId: !Ref 'NetworkAcl'
      PortRange:
        From: '22'
        To: '22'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '101'
    Type: AWS::EC2::NetworkAclEntry
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      GroupName: 'MySG'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
        - CidrIp: '10.0.0.0/8'
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
      VpcId: !Ref 'VPC'
  ASGSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      GroupName: 'ASG_SECGROUP'
      SecurityGroupIngress:
        - CidrIp: '10.0.0.0/8'
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
        - CidrIp: '10.0.0.0/8'
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
      VpcId: !Ref 'VPC'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  NetworkAcl:
    Properties:
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::NetworkAcl
  OutBoundHTTPNetworkAclEntry:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: 'true'
      NetworkAclId: !Ref 'NetworkAcl'
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  OutBoundHTTPSNetworkAclEntry:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: 'true'
      NetworkAclId: !Ref 'NetworkAcl'
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '101'
    Type: AWS::EC2::NetworkAclEntry
  OutBoundResponsePortsNetworkAclEntry:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: 'true'
      NetworkAclId: !Ref 'NetworkAcl'
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '102'
    Type: AWS::EC2::NetworkAclEntry
  Route:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'RouteTable1'
    Type: AWS::EC2::Route
  Route2:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: '10.0.0.0/8'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'RouteTable2'
    Type: AWS::EC2::Route
  RouteTable1:
    Properties:
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  RouteTable2:
    Properties:
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  SubnetNetworkAclAssociation:
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      SubnetId: !Ref 'mySubnet1'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  SubnetNetworkAclAssociation:
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      SubnetId: !Ref 'mySubnet2'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  SubnetRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'RouteTable2'
      SubnetId: !Ref 'mySubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'RouteTable1'
      SubnetId: !Ref 'mySubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  VPC:
    Properties:
      CidrBlock: 10.0.0.0/16
    Type: AWS::EC2::VPC
  mySubnet1:
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  mySubnet2:
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  mySubnet3:
    Properties:
      AvailabilityZone: us-east-1c
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  mySubnet4:
    Properties:
      AvailabilityZone: us-east-1d
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  mySubnet5:
    Properties:
      AvailabilityZone: us-east-1e
      CidrBlock: 10.0.4.0/24
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  mySubnet6:
    Properties:
      AvailabilityZone: us-east-1f
      CidrBlock: 10.0.5.0/24
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet

  testInstance1:
    Properties:
      ImageId: ami-00eb20669e0990cb4
      InstanceType: t2.micro
      SubnetId: !Ref 'mySubnet1'
      SecurityGroupIds: [!Ref "MySecurityGroup"]
      KeyName: 'tst_Balancer'
      Tags:
        - Key: Comment
          Value: Learning CloudFormation and Troposphere
        - Key: Name
          Value: homework-1
    Type: AWS::EC2::Instance

  MyEIP1:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref testInstance1
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties: {}
  MyIAMRole1:
    Type: "AWS::IAM::Role"
    Properties:
       AssumeRolePolicyDocument:
         Version: "2012-10-17"
         Statement:
           -
             Effect: "Allow"
             Principal:
               Service:
                 - "ec2.amazonaws.com" 
             Action: 
               - "sts:AssumeRole"
  RolePolicies:
      Type: "AWS::IAM::Policy"
      Properties:   
         PolicyName: "test"
         PolicyDocument:
               Version: "2012-10-17"
               Statement:
                 -
                   Effect: "Allow"
                   Action: "*"
                   Resource: "*"
         Roles:
           -
             Ref: "MyIAMRole1" 
  RootInstanceProfile:
      Type: "AWS::IAM::InstanceProfile"
      Properties:
         Path: "/"
         Roles:
           -
             Ref: "MyIAMRole1" 



